#include <iostream>

/*
¬ одной компьютерной игре игрок выставл€ет в линию шарики разных цветов.
 огда образуетс€ непрерывна€ цепочка из трех и более шариков одного цвета, она удал€етс€ из линии.
¬се шарики при этом сдвигаютс€ друг к другу, и ситуаци€ может повторитьс€.

Ќапишите программу, котора€ по данной ситуации определ€ет, сколько шариков будет "уничтожено".
≈стественно, непрерывных цепочек из трех и более одноцветных шаров в начальный момент может быть не более одной.

¬ходные данные
—начала вводитс€ количество шариков в цепочке (не более 1000) и цвета шариков (от 0 до 9, каждому цвету соответствует свое целое число).

¬ыходные данные
“ребуетс€ вывести количество шариков, которое будет "уничтожено".
*/

void ArraysG()
{
	int sum = 0; // количество шариков
	int counter = 0; // счетчик шариков одного цвета подр€д
	int counterEnd = 0;
	int arr[1000] = { 0 };

	std::cin >> sum;


	for (int i = 0; i < sum; i++) // наполн€ем массив
	{
		std::cin >> arr[i];
	}

	for (int i = 0; i < sum; i++)
	{
		if (arr[i] == arr[i + 1]) // если следующий элемент == текущему, увеличиваем счетчик
		{
			counter++;
		}
		else // если следующий элемент != текущему:
		{
			if (counter > 1) // если шариков подр€д достаточно чтобы уничтожитьс€
			{
				for (int ii = 0; ii < (sum - i); ii++) // сдвигаем элементы после сокращени€ шариков
				{
					arr[i - counter + ii] = arr[i + 1 + ii];
				}

				sum -= 3; // уменьшаем рабочий р€д на количество сокращенных шаров
				counterEnd += ++counter; // прибавл€ем количество уничтоженных шариков к общему счету
				i = -1; // обнул€ем счетчик цикла
				counter = 0; // сбрасываем счетчик и цикл начинаетс€ заного
			}
			else // если шариков подр€д недостаточно чтобы уничтожитьс€
			{
				counter = 0; //сбрасываем счетчик и идем дальше
			}
		}
	}

	if (counter > 1)
	{
		counterEnd += ++counter;
	}

	std::cout << counterEnd;

}



